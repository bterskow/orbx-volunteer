import asyncio, json
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from env import Env
from modules.applications import Applications

env = Env()
bot_token = env.bot_token

applications = Applications(env)

dp = Dispatcher()
bot = Bot(token=bot_token)

categories = [
	'–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
	'–†–ï–ë',
	'–ó–≤\'—è–∑–æ–∫',
	'–ü—Ä–æ–¥—É–∫—Ç–∏ —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è',
	'–ú–µ–¥–∏—á–Ω—ñ –∑–∞—Å–æ–±–∏',
	'–ó–∞—Å–æ–±–∏ –∑–∞—Ö–∏—Å—Ç—É',
	'–û–¥—è–≥ —Ç–∞ –≤–∑—É—Ç—Ç—è',
	'–û–±–ª–∞–¥–Ω–∞–Ω–Ω—è',
	'–ë—É–¥—ñ–≤–µ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏',
	'–õ–æ–≥—ñ—Å—Ç–∏–∫–∞',
	'–ü–æ–±—É—Ç–æ–≤—ñ —Ä–µ—á—ñ',
	'–ù–∞–≤—á–∞–Ω–Ω—è —Ç–∞ —Ç—Ä–µ–Ω—ñ–Ω–≥–∏',
]

def create_message(_from, item):
	if _from == 'military':
		message = f'''
- –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ: {item.get('fullname')}
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {item.get('phonenumber')}
- –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {item.get('email')}
- –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: {item.get('place')}
- –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {item.get('category')}
- –†–µ—Å—É—Ä—Å–∏: {item.get('resource')}
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤: {item.get('resourcecount')}
- –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {item.get('additioninformation')}
- –ß–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {item.get('created_at')}
'''
	
	elif _from == 'volunteer':
		message = f'''
- –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ: {item.get('fullname')}
- –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {item.get('phonenumber')}
- –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞: {item.get('email')}
- –ú—ñ—Å—Ü–µ–∑–Ω–∞—Ö–æ–¥–∂–µ–Ω–Ω—è: {item.get('place')}
- –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {item.get('category')}
- –ü–æ—Ç—Ä–µ–±–∏: {item.get('resource')}
- –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {item.get('resourcecount')}
- –í/—á: {item.get('union')}
- –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: {item.get('additioninformation')}
- –ß–∞—Å –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {item.get('created_at')}
'''

	return message

def menu():
	kb = [
		[
		    types.KeyboardButton(text='–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É'),
		    types.KeyboardButton(text='–ù–∞–¥–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É'),
		],
		[
			types.KeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤'),
		],
		[
			types.KeyboardButton(text='–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏ –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö'),
		]
	]

	keyboard = types.ReplyKeyboardMarkup(
		keyboard=kb,
		resize_keyboard=True,
		# input_field_placeholder=''
	)

	return keyboard

def categories_menu(_from='military'):
	builder = InlineKeyboardBuilder()

	for index, category in enumerate(categories):
		builder.row(types.InlineKeyboardButton(
			text=category, callback_data=f'category_{index}_{_from}')
		)

	return builder

@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
	user_fullname = message.from_user.full_name
	greetings_message = f'''
		–í—ñ—Ç–∞—é, <strong>{user_fullname}</strong>! üëã

–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –Ω–∞—à–æ–≥–æ Telegram-–±–æ—Ç–∞ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö! 

–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ:
- –ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤–æ–ª–æ–Ω—Ç–µ—Ä—Å—å–∫–æ—ó –¥–æ–ø–æ–º–æ–≥–∏ üìù
- –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Å—Ç–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤, —â–æ–± –∑–Ω–∞–π—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥–æ–ø–æ–º–æ–≥—É üì¶
- –ó–∞–ª–∏—à–∏—Ç–∏ —Å–≤–æ—ó –ø–æ–±–∞–∂–∞–Ω–Ω—è –∞–±–æ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è üó£Ô∏è

–í–æ–ª–æ–Ω—Ç–µ—Ä–∏, –≤–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ:
- –î–æ–¥–∞—Ç–∏ —Å–≤–æ—ó –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—É –¥–æ–ø–æ–º–æ–≥—É üåü
- –ó–≤'—è–∑–∞—Ç–∏—Å—è –∑ —Ç–∏–º–∏, —Ö—Ç–æ –ø–æ—Ç—Ä–µ–±—É—î –≤–∞—à–æ—ó –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ ü§ù

–†–∞–∑–æ–º –º–∏ —Å–∏–ª—å–Ω—ñ—à—ñ! üá∫üá¶

–ó –±—É–¥—å-—è–∫–∏—Ö –ø–∏—Ç–∞–Ω—å –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –¥–æ –Ω–∞—à–æ—ó —Å–ª—É–∂–±–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏. –î—è–∫—É—î–º–æ, —â–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –Ω–∞—à–æ—ó —Å–ø—ñ–ª—å–Ω–æ—Ç–∏! üíôüíõ
	'''
	await message.answer(greetings_message, reply_markup=menu(), parse_mode='HTML')

@dp.message(F.text.lower() == '–æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É')
async def need_help(message: types.Message):
    await message.reply(f'''
    	–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ, —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É.

–á–á –æ—Ç—Ä–∏–º–∞—î –±—ñ–ª—å—à–µ, –Ω—ñ–∂ 20 –≤–æ–ª–æ–Ω—Ç–µ—Ä—å—Å–∫–∏–π –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π —Ç–∞ —Å—Ç–∞–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–º –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º, —â–æ –¥–æ –Ω–∞—Å –¥–æ–ª—É—á–∏–ª–∏—Å—å! 

–†–∞–∑–æ–º –º–∏ - –£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶

<a href='{env.google_from_url}'>üì®üì®üì®</a>
''', parse_mode='HTML')

@dp.message(F.text.lower() == '–Ω–∞–¥–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É')
async def give_help(message: types.Message):
    await message.reply(f'''
    	–ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ, —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É.

–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ó—ó –∑–º–æ–∂—É—Ç—å —É—Å—ñ –≤—ñ–π—Å—å–∫–æ–≤—ñ, —â–æ –¥–æ –Ω–∞—Å –¥–æ–ª—É—á–∏–ª–∏—Å—å! 

–†–∞–∑–æ–º –º–∏ - –£–∫—Ä–∞—ó–Ω–∞ üá∫üá¶

<a href='{env.google_from_url}'>üì®üì®üì®</a>
''', parse_mode='HTML')

@dp.message(F.text.lower() == '–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤')
async def give_help(message: types.Message):
    await message.answer(
        '–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:',
        reply_markup=categories_menu().as_markup(),
    )

@dp.message(F.text.lower() == '–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç—Ä–µ–±–∏ –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö')
async def give_help(message: types.Message):
    await message.answer(
        '–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:',
        reply_markup=categories_menu('volunteer').as_markup(),
    )

# CALLBACKS

@dp.callback_query(lambda callback: callback.data.startswith('category_'))
async def callback_category(callback: types.CallbackQuery):
	data = callback.data.split('_')
	index = int(data[1])
	_from = str(data[2])
	category = categories[index]

	await callback.answer(f'–ó–∞—á–µ–∫–∞–π—Ç–µ –±—É–¥—å-–ª–∞—Å–∫–∞ ‚è≥')

	select = applications.select(category, _from)
	if select['status'] == 'error':
		await bot.send_message(callback.from_user.id, select['err_description'])

	else:
		items = select.get('items', [])
		for item in items:
			message = create_message(_from, item)
			await bot.send_message(callback.from_user.id, message)

async def main():
	await dp.start_polling(bot)

if __name__ == '__main__':
	try:
		asyncio.run(main())
		
	except KeyboardInterrupt:
		print('Exit!')